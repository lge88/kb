#! /usr/bin/env bash

function usage {
  cat <<EOF
Usage: $0 <project>
Example:
$0 c11-lambda
EOF
}

if [[ $# != 1 ]]; then
  usage
  exit 1
fi

proj_name="${1}"
dest_dir="${1}"
dest_file="${dest_dir}/${proj_name}.cc"

mkdir -p $dest_dir
mkdir -p $dest_dir/data

cat <<'BOILERPLATE_EOF' >$dest_file
#include <algorithm>
#include <cassert>
#include <cstdlib>
#include <fstream>
#include <iostream>
#include <iterator>
#include <map>
#include <set>
#include <sstream>
#include <string>
#include <unordered_map>
#include <unordered_set>
#include <vector>

using namespace std;

int f(int a, int b) {
  return a + b;
}

int main(int argc, char* argv[]) {
  int a, b;
  cin >> a >> b;
  cout << f(a, b) << "\n";
  return 0;
}
BOILERPLATE_EOF

cat <<TEST_EOF >$dest_dir/test-${proj_name}
#! /bin/bash
cwd=\$(cd \$(dirname \$0) && pwd)

data_dir=\$cwd/data
prog=\$cwd/$proj_name

for in_file in \$(ls \$data_dir/*.in); do
  test_case=\${in_file%.in}
  test_case=\${test_case##*/}
  out_file=\${data_dir}/\${test_case}.out
  diff <(\$prog <\$in_file) \$out_file >/dev/null
  if [[ $? -eq 0 ]]; then
    echo "[PASS] \${test_case}"
  else
    echo "[FAIL] \${test_case}"
  fi
done
TEST_EOF
chmod +x $dest_dir/test-${proj_name}

cat <<'DATA_EOF' >$dest_dir/data/00.in
1
2
DATA_EOF

cat <<'DATA_EOF' >$dest_dir/data/00.out
3
DATA_EOF

cat <<GITIGNORE_EOF >$dest_dir/.gitignore
$proj_name
*.o
*.dSYM
GITIGNORE_EOF

cat <<MAKEFILE_EOF >$dest_dir/Makefile
run: $proj_name
	./test-$proj_name

$proj_name: $proj_name.cc
	g++ -std=c++11 -g \$^ -o \$@

clean:
	rm -fr $proj_name *.o *.dSYM
MAKEFILE_EOF

cat <<README_EOF >$dest_dir/README.md
# $proj_name

## Input format
<Number a>
<Number b>

## Output format
<a + b>
README_EOF

(cd $dest_dir; pwd; make)
